generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated"
  previewFeatures = ["metrics"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?
  resumes   Resume[]
}

model Resume {
  id             Int              @id @default(autoincrement())
  fileName       String
  fileType       String
  fileData       String
  userId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  profileSummary String?
  user           User             @relation(fields: [userId], references: [id])
  sections       ResumeSection[]
  analyses       ResumeAnalysis[]

  @@index([userId])
}

model ResumeSection {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  orderIndex Int
  resumeId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  resume     Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

model ResumeAnalysis {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  resumeId                Int
  executiveSummary        String
  overview                String?
  contentQuality          String?
  atsCompatibility        String?
  industryFit             String?
  formattingReview        String?
  skillsAnalysis          String?
  careerTrajectory        String?
  improvementSuggestions  String?
  overallScore            Float
  contentScore            Int
  atsOptimizationScore    Int
  industryAlignmentScore  Int
  formattingScore         Int
  skillsScore             Int
  aiGeneratedImprovements Json?
  positionedSuggestions   Json?
  status                  String   @default("pending")
  resume                  Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
 
  grammarScore             Int     @default(0) // New field
  clarityScore             Int     @default(0) // New field

  grammarIssues            Json?   // New field
  @@index([resumeId])
}
